#!/usr/bin/env tclsh

package require Tk

################################################################################
# VARIABLES
#
namespace eval tClip {
  variable version {0.4.3}
  variable auto    {false}
  variable ontop   {false}
  variable wrap    {none}
  variable clip    {}
  variable hclip   [list]
  variable msg     {}
  variable theme   [ttk::style theme use]
  variable type    [expr {[tk windowingsystem] eq "x11" ? "UTF8_STRING" : "STRING"}]
}

################################################################################
# PROCEDURES
#
proc tClip::Message {msg} {
  set tClip::msg "[string bytelength $msg] bytes"
}

proc tClip::Read {} {
  if {![catch {set tClip::clip [clipboard get -type $tClip::type]}]} {
    # do not update combobox list if already there
    if {$tClip::clip ni $tClip::hclip} {
      lappend tClip::hclip $tClip::clip
    }
  }
  # cancel any rogue previous timers
  after cancel {tClip::Read}
  if {$tClip::auto eq "true"} {
    after 1000 {tClip::Read}
  }
}

proc tClip::Update {text} {
  tClip::Read
  tClip::Message $tClip::clip
  set old [$text get 0.0 "end -1 indices"]
  set oldi [$text index insert]
  $text delete 0.0 end
  $text insert end $tClip::clip
  set new [$text get 0.0 "end -1 indices"]
  # in user input keep cursor in place
  if {[string equal $old $new] == 1} {
    $text mark set insert $oldi
  } else {
    $text mark set insert 0.0
    $text see insert
  }
  focus $text
}

proc tClip::Add {text data} {
  if {$data eq ""} {return 1}
  clipboard clear
  clipboard append -type STRING -- $data
  tClip::Update $text
}

proc tClip::Clear {text} {
  clipboard clear
  $text delete 0.0 end
}

proc tClip::SelectAll {text} {
  if {[$text get 0.0 "end -1 indices"] eq ""} {return 1}
  $text tag add sel 0.0 "end -1 indices"
}

proc tClip::Modified {text} {
  .menu.clipboard entryconfigure "Add to Clipboard" \
    -state [expr {[$text edit modified] ? "normal" : "disabled"}]
}

proc tClip::UndoStack {text} {
  foreach {item action} {Undo canundo Redo canredo} {
    .menu.edit entryconfigure $item \
      -state [expr {[$text edit $action] ? "normal" : "disabled"}]
  }
}

proc tClip::Pipe {text} {
  chan event stdin readable {}
  set data ""
  while {[chan gets stdin line] >= 0} {
    append data $line "\n"
  }
  set data [string range $data 0 end-1]
  if {[string length $data] > 0} {
    tClip::Add $text $data
  }
}

proc tClip::About {version} {
  tk_messageBox -title "About tClip" -icon info -type ok -parent . \
    -message "tClip $version" -detail \
{A simple clipboard manager,
written in core Tcl/Tk.

MIT License

Copyright Â© Thanos Zygouris
<athanasios.zygouris@gmail.com>}
}

################################################################################
# MAIN MENU
#
proc tClip::Menu {} {
  option add *tearOff false
  . configure -menu [menu .menu]
  .menu add cascade -label "Clipboard" -underline 0 -menu [menu .menu.clipboard]
    .menu.clipboard add command -label "Read from Clipboard" -underline 0 \
      -accelerator "Ctrl+R" -command {tClip::Update .text}
    .menu.clipboard add command -label "Add to Clipboard" -underline 0 \
      -state disabled -accelerator "F3" \
      -command {tClip::Add .text [.text get 0.0 "end -1 indices"]}
    .menu.clipboard add command -label "Clear Clipboard" -underline 0 \
      -accelerator "Ctrl+L" -command {tClip::Clear .text}
    .menu.clipboard add separator
    .menu.clipboard add command -label "Exit" -underline 1 \
      -accelerator "Ctrl+Q" -command {exit}
  .menu add cascade -label "Edit" -underline 0 -menu [menu .menu.edit]
    .menu.edit add command -label "Undo" -underline 0 \
      -accelerator "Ctrl+Z" -command {.text edit undo}
    .menu.edit add command -label "Redo" -underline 0 \
      -accelerator "Ctrl+Shift+Z" -command {.text edit redo}
    .menu.edit add separator
    .menu.edit add command -label "Cut" -underline 2 \
      -accelerator "Ctrl+X" -command {tk_textCut .text}
    .menu.edit add command -label "Copy" -underline 0 \
      -accelerator "Ctrl+C" -command {tk_textCopy .text}
    .menu.edit add command -label "Paste" -underline 0 \
      -accelerator "Ctrl+V" -command {tk_textPaste .text}
    .menu.edit add separator
    .menu.edit add command -label "Select All" -underline 7 \
      -accelerator "Ctrl+A" -command {tClip::SelectAll .text}
  .menu add cascade -label "Options" -underline 0 -menu [menu .menu.options]
    .menu.options add checkbutton -label "On Top" -underline 3 \
      -accelerator "F2" \
      -variable tClip::ontop -onvalue "true" -offvalue "false" \
      -command {wm attributes . -topmost $tClip::ontop}
    .menu.options add separator
    .menu.options add checkbutton -label "Word Wrap" -underline 5 \
      -accelerator "Ctrl+W" \
      -variable tClip::wrap -onvalue "word" -offvalue "none" \
      -command {.text configure -wrap $tClip::wrap}
    .menu.options add separator
    .menu.options add cascade -label "Themes" -underline 3 \
      -menu [menu .menu.options.themes]
      foreach theme [ttk::style theme names] {
        .menu.options.themes add radiobutton -label $theme \
          -variable tClip::theme -value $theme \
          -command [list ttk::style theme use $theme]
      }
    .menu.options add separator
    .menu.options add checkbutton -label "Auto Update" -underline 5 \
      -variable tClip::auto -onvalue "true" -offvalue "false" \
      -command {tClip::Read}
  .menu add cascade -label "Help" -underline 0 -menu [menu .menu.help]
    .menu.help add command -label "About tClip..." -underline 0 \
      -accelerator "F1" -command {tClip::About $tClip::version}
}

################################################################################
# WIDGETS
#
proc tClip::Widgets {} {

  ttk::labelframe .lf_clip -relief flat -text "\u2022 Saved Clips:"
    ttk::combobox .cb_clip -textvariable tClip::clip \
      -takefocus 0 -state readonly -exportselection true \
      -values $tClip::hclip \
      -postcommand {.cb_clip configure -values $tClip::hclip}
    grid .cb_clip -in .lf_clip -row 0 -column 0 -sticky we
    grid columnconfigure .lf_clip .cb_clip -weight 1

  ttk::labelframe .lf_text -relief flat -text "\u2022 Details:"
    tk::text .text -relief sunken -highlightthickness 0 -takefocus 0 \
      -wrap $tClip::wrap -undo true -autoseparators true \
      -tabstyle wordprocessor -insertofftime 0 \
      -xscrollcommand {.xscroll set} -yscrollcommand {.yscroll set}
    ttk::scrollbar .yscroll -orient vertical   -command {.text yview}
    ttk::scrollbar .xscroll -orient horizontal -command {.text xview}
    grid .text    -in .lf_text -row 0 -column 0 -sticky nswe
    grid .yscroll -in .lf_text -row 0 -column 1 -sticky ns
    grid .xscroll -in .lf_text -row 1 -column 0 -sticky we
    grid rowconfigure    .lf_text .text -weight 1
    grid columnconfigure .lf_text .text -weight 1

  ttk::frame .statusbar -borderwidth 1 -relief sunken
    ttk::label .message -textvariable tClip::msg
    ttk::sizegrip .sizegrip
    grid .message  -in .statusbar -row 0 -column 0 -sticky we
    grid .sizegrip -in .statusbar -row 0 -column 1 -sticky e
    grid columnconfigure .statusbar .message -weight 1

  grid .lf_clip   -row 0 -column 0 -sticky we
  grid .lf_text   -row 1 -column 0 -sticky news
  grid .statusbar -row 2 -column 0 -sticky we
  grid rowconfigure    . .lf_text -weight 1
  grid columnconfigure . .lf_text -weight 1
}

################################################################################
# BINDINGS
#
proc tClip::Bindings {} {
  set bindings [list \
    <Control-a> <Control-l> <Control-q> <Control-r> \
    <Control-w> <Control-z> <Control-Z> \
  ]
  foreach keysym $bindings {
    bind Text $keysym {return 0}
  }

  bind all <KP_Enter>  {event generate %W <Return>}
  bind all <Control-r> {.menu.clipboard invoke "Read from Clipboard"}
  bind all <F3>        {.menu.clipboard invoke "Add to Clipboard"}
  bind all <Control-q> {.menu.clipboard invoke "Exit"}
  bind all <F2>        {.menu.options invoke "On Top"}
  bind all <F1>        {.menu.help invoke "About tClip..."}

  bind Text <Control-l>     {.menu.clipboard invoke "Clear Clipboard"}
  bind Text <Control-z>     {.menu.edit invoke "Undo"}
  bind Text <Control-Z>     {.menu.edit invoke "Redo"}
  bind Text <Control-a>     {.menu.edit invoke "Select All"}
  bind Text <Control-w>     {.menu.options invoke "Word Wrap"}
  bind Text <<Modified>>    {tClip::Modified %W}
  bind Text <<UndoStack>>   {tClip::UndoStack %W}
  bind Text <ButtonPress-3> {tk_popup .menu.edit %X %Y}

  bind TCombobox <<ComboboxSelected>> {
    tClip::Add .text $tClip::clip
    %W selection clear
  }
}

################################################################################
# MAIN PROGRAM
#
tClip::Menu
tClip::Widgets
tClip::Bindings
focus .text
# initialize undo/redo menu items
tClip::UndoStack .text
# check clipboard on program start
tClip::Update .text

wm title    . "tClip"
wm minsize  . 230 230
wm protocol . WM_DELETE_WINDOW {.menu.clipboard invoke "Exit"}

################################################################################
# COMMAND LINE
#
if {$::argc > 0} {
  tClip::Add .text [join $::argv "\n"]
}
# get input from OS pipe (stdout)
chan event stdin readable {tClip::Pipe .text}
